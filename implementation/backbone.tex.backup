\section{Backbone.JS}
Первоначально было решено использовать для реализации данный инструмент. Основными предпосылками были легковесность (около 6 Кб), высокая интеграция с jQuery и высокий контроль процесса написания приложения. При написании данного приложения была задействована структура каталогов, отображенная на рисунке \ref{backbone_structure}. В директории css находятся таблицы стилей, в js находится код моделей, контроллеров и роутеров. В файле index.html  В каталоге libs находятся различные библиотеки, задействованные при написании данного приложения.

\begin{figure}[h]
\center\includegraphics[width=0.4\textwidth]{backbone_structure}
\caption{Структура каталогов}\label{backbone_structure}
\end{figure}

Первым делом были написаны шаблоны представлений:

\begin{enumerate}
 \item Представление для создания нового задания. .
 \item Представление для просмотра списка поставленных задач.
 \item Представление для вывода подробной информации об исследовании.
 \item Шаблон для построения графика результата.
\end{enumerate}

Представление для создания нового задания получается довольно динамическим: форма генерируется налету, ее компоненты зависят от выбранного алгоритма, что приводит к перестройке формы при смене алгоритма. В более-менее сложных разметках использование HTML кода внутри JavaScript довольно бессмысленная затея. Код становится запутанным и сложнее для понимания, а также теряются преимущества использования среды разработки. К сожалению, библиотека Backbone.JS не имеет встроенного шаблонизатора --- авторы оставляют выбор за разработчиком. Поэтому был написан свой, основанный на шаблонизаторе Mustache из библиотеки Underscore.js. Его основное отличие в том, что заимствованная библиотека позволяет хранить шаблон только в виде строки, в то время как написанный шаблонизатор из файлов. Шаблон представляет собой скрипт с типом \textbf{text/template} и имеет уникальный идентификатор. Тело шаблона представлено в виде расширенного HTML и компилируется написанной функцией template. В ходе компиляции происходит санитизация полученных данных, интерполяция переменных и необходимые вычисления для чего используется специальный синтаксис <\% ... \%> и <\%= … \%>. Пример кода шаблона отображен на рисунке \ref{template_example}. Скомпилированный шаблон отражен на рисунке \ref{new_issue}.

\begin{figure}[ht]
\center\includegraphics[width=\textwidth]{template_example}
\caption{Пример шаблона}\label{template_example}
\end{figure}

\begin{figure}[ht]
\center\includegraphics[width=\textwidth]{new_issue}
\caption{Пример шаблона}\label{new_issue}
\end{figure}

Для быстрой разработки и верстки шаблонов в ходе создании представлений активно использовалась библиотека Twitter Bootstrap. Это свободный набор инструментов, включающий в себя CSS шаблоны оформления веб-форм, кнопок, меток, блоков навигации. Он использует самые современные наработки в области CSS и HTML и позволяет сэкономить время и усилия, используя шаблоны дизайна. Также все компоненты платформы Bootstrap используют единый стиль благодаря чему веб-страницы имеют приятный интерфейс.

Представление для просмотра списка поставленных задач не отличется ни чем примечательным: это нумерованный список результатов. Результат отображен на рисунке \ref{list}. Результаты, находящиеся в очереди, обведены серым фоном и недоступны для подробного просмотра. Вывод подробной информации об исследовании аналогичен созданию нового. Если результатом исследования является график, то задействуется специальный шаблон. Он позволяет курсором подробно изучать полученные значения характеристик в различных точках графика. Скомпилированный шаблон отражен на рисунке \ref{result}.

\begin{figure}[ht]
\center\includegraphics[width=\textwidth]{list}
\caption{Пример шаблона}\label{list}
\end{figure}

\begin{figure}[ht]
\center\includegraphics[width=\textwidth]{result}
\caption{Пример шаблона}\label{result}
\end{figure}

После того как были подготовлены основные шаблоны, можно приступить к созданию вида в Backbone. Для этого достаточно расширить базовый класс, задать базовый тег и переопределить метод render():
\begin{lstlisting}
var IssueListView = Backbone.View.extend({
  tagName: 'ol',
  template: template('listTemplate'),
  render: 
});
\end{lstlisting}



необходимо позаботиться о хранении данных в процессе работы программы. Данные в программах, написанных с использованием Backbone.js хранятся в моделях --- специальных конструкторов объектов с уже готовым набором служебных методов. Создание модели происходит достаточно просто --- необходимо расширить базовую модель:
\begin{lstlisting}
var IssueModel = Backbone.Model.extend({
  defaults: {
    type: null,
    area: null,
    size: 0,
    step_count: 0,
    vertex_count: 0
  }
});
\end{lstlisting}
Таким образом, создается новый класс Model, который принимает параметром анонимный объект и класс модели наполяется значениями. После создания класса модели, для инстанцирования экземпляра класса можно воспользоваться стандартным способом при помощи new, при этом конструктору передается объект с данными, которые попадут в экземпляр класса:
\begin{lstlisting}
var issue = new IssueModel({
  type: "min_dom",
  area: "circle",
  size: 8,
  step_count: 1000,
  vertex_count: 100
});
\end{lstlisting}
Для доступа к атрибутам модели или создания новых в процессе исполнения программы необходимо воспользоваться методами get() и set(). В отличие от прямого доступа к данным, использование getter'ов и setter'ов инкапсулирует доступ к данным экземпляра, а также позволяет контроллерам отреагировать на изменение модели --- произойдет рассылка события 'change' всем подписанным контроллерам на этот экземпляр.

Для описания модели исследования была спроектирована следующая структура модели, отображенная на рисунке \ref{issue_model_backbone}. Самые основные аттрибуты, которые присутствуют у большинства исследований (алгоритм, тип исследуемой области, размер области, количество вершин, количество повторений запуска алгоритма и основные статистические характеристики) были вынесены в класс модели. Остальные аттрибуты, которые присутствуют только у конкретных алгоритмов могут быть легко добавлены в модель при помощи метода set().

\begin{figure}[ht]
\center\includegraphics[width=0.75\textwidth]{issue_model_backbone}
\caption{Реализация модели исследования}\label{issue_model_backbone}
\end{figure}